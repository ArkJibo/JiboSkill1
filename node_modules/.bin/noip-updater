#!/usr/bin/env node

var kDefaultFrequency = 12;

var optimist = require('optimist');
var updater = require('./index.js');
var buffer = require('buffer');
function base64_decode(str) {
	var b = new buffer.Buffer(str, 'base64');
	return b.toString();
}

var opts = optimist.usage('Node.js NoIP Updater')
				   .default('frequency', kDefaultFrequency).alias('frequency', 'f').describe('frequency', 'Frequency, in hours, to ping the NoIP server')
				   .alias('user', 'u').describe('user', 'NoIP username')
				   .alias('pass', 'p').describe('pass', 'NoIP password')
				   .alias('epass', 'e').describe('epass', 'Base64 password, keep it out of plain text')
				   .alias('domain', 'd').describe('domain', 'Domain to update')
				   .alias('https', 's').describe('https', 'Use SSL to connect to the server').default('https', false)
				   .boolean('help').boolean('h')
				   .demand(['user', 'domain']);

var argv = opts.argv;
if (argv.help || argv.h) {
	console.log(opts.help());
	process.exit();
}
if (!argv.pass && !argv.epass) {
	console.log('You must specify either --pass or --epass!');
	console.log(opts.help());
	process.exit();
}

if (argv.pass && argv.epass) {
	console.log('You can on specify either --pass or --epass, not both');
	console.log(opts.help());
	process.exit();
}

var password = argv.pass;
if (argv.epass) {
	password = base64_decode(argv.epass);
}
// console.log('PW: ' + password);

function update() {
	try {		
		console.log('Pinging NoIP, allowing it to detect public IP');
		updater.updateNoIP(argv.user, password, argv.domain, false, argv.https, function(body, res, err) {
			if (err) return console.error(err);
			else if (body.indexOf('good') >= 0) return console.log('Connected to NoIP, updated IP for ' + argv.domain + ' to current public IP.');
			else if (body.indexOf('nochg') >= 0) return console.log('Connected to NoIP, IP didn\'t change for host ' + argv.domain + '.');
			else if (body.indexOf('badauth') >= 0) {
				console.error('Incorrect username or password!');
				process.exit();
			} else {
				console.log('Connected to NoIP, got error response: ' + body);
				process.exit();
			}
		});
	} catch(err) {
		console.error('Error!');
		console.error(err);
	}
}
setInterval(update, (argv.frequency * 60 * 60 * 1000));
update();
